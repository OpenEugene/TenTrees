@using OE.TenTrees.Services
@using OE.TenTrees.Models

@namespace OE.TenTrees.Garden
@inherits ModuleBase
@inject IGardenService GardenService
@inject IApplicationService ApplicationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Index> Localizer

@if (_gardens == null)
{
    <p><em>Loading gardens...</em></p>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3>Garden Management</h3>
        <div class="btn-group">
            <ActionLink Action="Create" Security="SecurityAccessLevel.Edit" Text="Create Garden from Application" ResourceKey="Create" Class="btn btn-primary" />
            <ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="New Garden" ResourceKey="Add" Class="btn btn-secondary" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-3">
            <label>Filter by Status:</label>
            <select class="form-select" @onchange="OnStatusFilterChanged">
                <option value="">All Gardens</option>
                <option value="@GardenStatus.Active">Active</option>
                <option value="@GardenStatus.Planted">Planted</option>
                <option value="@GardenStatus.UnderMonitoring">Under Monitoring</option>
                <option value="@GardenStatus.RequiresIntervention">Requires Intervention</option>
                <option value="@GardenStatus.Successful">Successful</option>
                <option value="@GardenStatus.Failed">Failed</option>
            </select>
        </div>
        <div class="col-md-3">
            <label>Filter by Village:</label>
            <select class="form-select" @onchange="OnVillageFilterChanged">
                <option value="">All Villages</option>
                @foreach (var village in _villages)
                {
                    <option value="@village">@village</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label>Show Only:</label>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="requiresAttention" @bind="@_showOnlyRequiresAttention" @onclick="ApplyFilters" />
                <label class="form-check-label" for="requiresAttention">
                    Requires Attention
                </label>
            </div>
        </div>
    </div>

    @if (_filteredGardens.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Actions</th>
                        <th>Beneficiary</th>
                        <th class="mobile-hide">Evaluator</th>
                        <th>Village</th>
                        <th>Status</th>
                        <th class="mobile-hide">Trees Planted</th>
                        <th class="mobile-hide">Species</th>
                        <th class="mobile-hide">Last Monitoring</th>
                        <th class="mobile-hide">Sessions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var garden in _filteredGardens)
                    {
                        <tr class="@(garden.RequiresAttention ? "table-warning" : "")">
                            <td>
                                <div class="btn-group" role="group">
                                    <ActionLink Action="Edit" Parameters="@($"id={garden.GardenSiteId}")" 
                                               Text="View/Edit" ResourceKey="Edit" Class="btn btn-sm btn-outline-primary" />
                                    
                                    @if (garden.Status == GardenStatus.Active || garden.Status == GardenStatus.Planted)
                                    {
                                        <ActionLink Action="Monitor" Parameters="@($"gardenId={garden.GardenSiteId}")" 
                                                   Text="Monitor" ResourceKey="Monitor" Class="btn btn-sm btn-outline-success" />
                                    }
                                    
                                    <ActionLink Action="Photos" Parameters="@($"gardenId={garden.GardenSiteId}")" 
                                               Text="Photos" ResourceKey="Photos" Class="btn btn-sm btn-outline-info" />
                                    
                                    <ActionDialog Header="Delete Garden" 
                                                Message="Are you sure you wish to delete this garden? This will also delete all monitoring sessions and photos." 
                                                Action="Delete" Security="SecurityAccessLevel.Edit" 
                                                Class="btn btn-sm btn-outline-danger" 
                                                OnClick="@(async () => await Delete(garden))" 
                                                ResourceKey="Delete" />
                                </div>
                            </td>
                            <td>
                                <div>
                                    <strong>@garden.BeneficiaryName</strong>
                                    <div class="d-md-none small text-muted">
                                        @if (!string.IsNullOrEmpty(garden.Village))
                                        {
                                            <div>📍 @garden.Village</div>
                                        }
                                        @if (garden.PlantingDate.HasValue)
                                        {
                                            <div>🌱 @garden.PlantingDate?.ToString("MM/dd/yyyy")</div>
                                        }
                                        @if (!string.IsNullOrEmpty(garden.EvaluatorName))
                                        {
                                            <div>👤 @garden.EvaluatorName</div>
                                        }
                                        <div>🌳 @garden.TotalTreesPlanted trees, @garden.TreeSpeciesCount species</div>
                                        <div>📊 @garden.MonitoringSessionCount sessions</div>
                                    </div>
                                </div>
                            </td>
                            <td class="mobile-hide">@garden.EvaluatorName</td>
                            <td>@garden.Village</td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(garden.Status)">
                                    @garden.Status
                                </span>
                                @if (garden.RequiresAttention)
                                {
                                    <br /><small class="text-warning">⚠️ Needs attention</small>
                                }
                            </td>
                            <td class="mobile-hide">@garden.TotalTreesPlanted</td>
                            <td class="mobile-hide">@garden.TreeSpeciesCount</td>
                            <td class="mobile-hide">@(garden.LastMonitoringDate?.ToString("MM/dd/yyyy") ?? "Never")</td>
                            <td class="mobile-hide">@garden.MonitoringSessionCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> No gardens found matching the current filter.
        </div>
    }

    @if (_gardens.Any())
    {
        <div class="row mt-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">@_gardens.Count</h5>
                        <p class="card-text">Total Gardens</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">@_gardens.Where(g => g.RequiresAttention).Count()</h5>
                        <p class="card-text">Need Attention</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">@_gardens.Sum(g => g.TotalTreesPlanted)</h5>
                        <p class="card-text">Trees Planted</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">@_gardens.Sum(g => g.MonitoringSessionCount)</h5>
                        <p class="card-text">Monitoring Sessions</p>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    public override List<Resource> Resources => new List<Resource>()
    {
        new Stylesheet(ModulePath() + "Module.css"),
        new Script(ModulePath() + "Module.js")
    };

    List<GardenListItemVm> _gardens;
    List<GardenListItemVm> _filteredGardens = new();
    List<string> _villages = new();
    string _statusFilter = "";
    string _villageFilter = "";
    bool _showOnlyRequiresAttention = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _gardens = await GardenService.GetGardenListItemsAsync();
            _filteredGardens = _gardens;
            _villages = _gardens.Where(g => !string.IsNullOrEmpty(g.Village))
                              .Select(g => g.Village)
                              .Distinct()
                              .OrderBy(v => v)
                              .ToList();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Gardens {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Delete(GardenListItemVm garden)
    {
        try
        {
            await GardenService.DeleteGardenAsync(garden.GardenSiteId);
            await logger.LogInformation("Garden Deleted {Garden}", garden);
            _gardens = await GardenService.GetGardenListItemsAsync();
            ApplyFilters();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Garden {Garden} {Error}", garden, ex.Message);
            AddModuleMessage(Localizer["Message.DeleteError"], MessageType.Error);
        }
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        _statusFilter = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnVillageFilterChanged(ChangeEventArgs e)
    {
        _villageFilter = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        _filteredGardens = _gardens.ToList();

        if (!string.IsNullOrEmpty(_statusFilter))
        {
            if (Enum.TryParse<GardenStatus>(_statusFilter, out var status))
            {
                _filteredGardens = _filteredGardens.Where(g => g.Status == status).ToList();
            }
        }

        if (!string.IsNullOrEmpty(_villageFilter))
        {
            _filteredGardens = _filteredGardens.Where(g => g.Village == _villageFilter).ToList();
        }

        if (_showOnlyRequiresAttention)
        {
            _filteredGardens = _filteredGardens.Where(g => g.RequiresAttention).ToList();
        }

        _filteredGardens = _filteredGardens.ToList();
        StateHasChanged();
    }

    private string GetStatusBadgeClass(GardenStatus status) => status switch
    {
        GardenStatus.Active => "bg-primary",
        GardenStatus.Planted => "bg-success",
        GardenStatus.UnderMonitoring => "bg-info",
        GardenStatus.RequiresIntervention => "bg-warning text-dark",
        GardenStatus.Successful => "bg-success",
        GardenStatus.Failed => "bg-danger",
        GardenStatus.Abandoned => "bg-secondary",
        _ => "bg-secondary"
    };
}