@using Oqtane.Modules.Controls
@using OE.TenTrees.Services
@using OE.TenTrees.Models

@namespace OE.TenTrees.Garden
@inherits ModuleBase
@inject IGardenService GardenService
@inject IApplicationService ApplicationService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

<form @ref="form" class="@(validated ? " was-validated" : "needs-validation") garden-form" novalidate>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h4>@(PageState.Action == "Add" ? "New Garden Site" : "Edit Garden Site")</h4>
                    </div>
                    <div class="card-body">
                        <!-- Basic Information -->
                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-3">
                                <Label For="evaluatorName" HelpText="Evaluator conducting the site assessment" ResourceKey="EvaluatorName">Evaluator Name: </Label>
                            </div>
                            <div class="col-sm-12 col-md-9">
                                <input id="evaluatorName" class="form-control" @bind="@_evaluatorName" required />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-3">
                                <Label For="beneficiaryName" HelpText="Garden beneficiary name" ResourceKey="BeneficiaryName">Beneficiary Name: </Label>
                            </div>
                            <div class="col-sm-12 col-md-9">
                                <input id="beneficiaryName" class="form-control" @bind="@_beneficiaryName" required />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-3">
                                <Label For="houseNumber" HelpText="House number or identifier" ResourceKey="HouseNumber">House Number: </Label>
                            </div>
                            <div class="col-sm-12 col-md-9">
                                <input id="houseNumber" class="form-control" @bind="@_houseNumber" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-3">
                                <Label For="idOrBirthdate" HelpText="ID number or birthdate" ResourceKey="IdOrBirthdate">ID or Birthdate: </Label>
                            </div>
                            <div class="col-sm-12 col-md-9">
                                <input id="idOrBirthdate" class="form-control" @bind="@_idOrBirthdate" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-3">
                                <Label For="village" HelpText="Village location" ResourceKey="Village">Village: </Label>
                            </div>
                            <div class="col-sm-12 col-md-9">
                                <input id="village" class="form-control" @bind="@_village" />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Mapping Information / Swa ineno -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>Mapping Information / Swa ineno</h5>
                        <small class="text-muted">Site assessment questions from the form</small>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Do you have water in the plot? / Kuna mati ka muli ye lowo?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="hasWater" id="hasWaterYes" value="true" @onchange="@(() => _hasWaterInPlot = true)" checked="@(_hasWaterInPlot == true)" />
                                    <label class="btn btn-outline-success" for="hasWaterYes">Yes / Ina</label>
                                    
                                    <input type="radio" class="btn-check" name="hasWater" id="hasWaterNo" value="false" @onchange="@(() => _hasWaterInPlot = false)" checked="@(_hasWaterInPlot == false)" />
                                    <label class="btn btn-outline-danger" for="hasWaterNo">No / Ee</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Is there any water catchment system? / Jojo tanki? Kuna xo khoma mati ku fana na thanki?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="hasCatchment" id="hasCatchmentYes" value="true" @onchange="@(() => _hasWaterCatchmentSystem = true)" checked="@(_hasWaterCatchmentSystem == true)" />
                                    <label class="btn btn-outline-success" for="hasCatchmentYes">Yes / Ina</label>
                                    
                                    <input type="radio" class="btn-check" name="hasCatchment" id="hasCatchmentNo" value="false" @onchange="@(() => _hasWaterCatchmentSystem = false)" checked="@(_hasWaterCatchmentSystem == false)" />
                                    <label class="btn btn-outline-danger" for="hasCatchmentNo">No / Ee</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Number of existing trees/productive plants in the yard / Nhlayu ya misinva kumbe swi byariwa swa mphayo xihanyeni xa yoch lowi ngaki?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <input type="number" class="form-control" @bind="@_numberOfExistingTrees" min="0" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Number of indigenous trees (namety) / Nhlayu ya misinva leyi yi nga foloxekangiki?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <input type="number" class="form-control" @bind="@_numberOfIndigenousTrees" min="0" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Number of fruit and nut trees (namety) / Nhlayu ya misinva ya mihandzu na timanga?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <input type="number" class="form-control" @bind="@_numberOfFruitNutTrees" min="0" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Is there space for more trees? / Kuna ndawu ya ku engeta misinva?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="hasSpace" id="hasSpaceYes" value="true" @onchange="@(() => _hasSpaceForMoreTrees = true)" checked="@(_hasSpaceForMoreTrees == true)" />
                                    <label class="btn btn-outline-success" for="hasSpaceYes">Yes / Ina</label>
                                    
                                    <input type="radio" class="btn-check" name="hasSpace" id="hasSpaceNo" value="false" @onchange="@(() => _hasSpaceForMoreTrees = false)" checked="@(_hasSpaceForMoreTrees == false)" />
                                    <label class="btn btn-outline-danger" for="hasSpaceNo">No / Ee</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Is the property fenced? / Ndawu yi pfafariwie hi darahi?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="isFenced" id="isFencedYes" value="true" @onchange="@(() => _isPropertyFenced = true)" checked="@(_isPropertyFenced == true)" />
                                    <label class="btn btn-outline-success" for="isFencedYes">Yes / Ina</label>
                                    
                                    <input type="radio" class="btn-check" name="isFenced" id="isFencedNo" value="false" @onchange="@(() => _isPropertyFenced = false)" checked="@(_isPropertyFenced == false)" />
                                    <label class="btn btn-outline-danger" for="isFencedNo">No / Ee</label>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-sm-12 col-md-8">
                                <label class="form-label">Are there any resources like compost or mulch that can be used for tree planting? / Kuna swimani lebyi nga pfumelaka hi ku byala misinva, ku fana na manyora?</label>
                            </div>
                            <div class="col-sm-12 col-md-4">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="hasCompost" id="hasCompostYes" value="true" @onchange="@(() => _hasCompostOrMulchResources = true)" checked="@(_hasCompostOrMulchResources == true)" />
                                    <label class="btn btn-outline-success" for="hasCompostYes">Yes / Ina</label>
                                    
                                    <input type="radio" class="btn-check" name="hasCompost" id="hasCompostNo" value="false" @onchange="@(() => _hasCompostOrMulchResources = false)" checked="@(_hasCompostOrMulchResources == false)" />
                                    <label class="btn btn-outline-danger" for="hasCompostNo">No / Ee</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Location Information -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>Location Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="latitude" class="form-label">Latitude:</label>
                                <input type="number" id="latitude" class="form-control" @bind="@_latitude" step="any" placeholder="e.g., -25.12345" />
                            </div>
                            <div class="col-md-6">
                                <label for="longitude" class="form-label">Longitude:</label>
                                <input type="number" id="longitude" class="form-control" @bind="@_longitude" step="any" placeholder="e.g., 31.12345" />
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-12">
                                <label for="address" class="form-label">Full Address:</label>
                                <textarea id="address" class="form-control" rows="2" @bind="@_address" placeholder="Complete address details..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Notes Section -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5>Additional Notes</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-12">
                                <textarea id="notes" class="form-control" rows="4" @bind="@_notes" placeholder="Additional observations, special instructions, or comments..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Status and Actions Sidebar -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Garden Status</h5>
                    </div>
                    <div class="card-body">
                        @if (PageState.Action == "Edit")
                        {
                            <div class="mb-3">
                                <label for="status" class="form-label">Status:</label>
                                <select id="status" class="form-select" @bind="@_status">
                                    <option value="@GardenStatus.Active">Active</option>
                                    <option value="@GardenStatus.Planted">Planted</option>
                                    <option value="@GardenStatus.UnderMonitoring">Under Monitoring</option>
                                    <option value="@GardenStatus.RequiresIntervention">Requires Intervention</option>
                                    <option value="@GardenStatus.Successful">Successful</option>
                                    <option value="@GardenStatus.Failed">Failed</option>
                                    <option value="@GardenStatus.Abandoned">Abandoned</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="plantingDate" class="form-label">Planting Date:</label>
                                <input type="date" id="plantingDate" class="form-control" @bind="@_plantingDate" />
                            </div>
                        }

                        @if (_applicationId.HasValue)
                        {
                            <div class="alert alert-info">
                                <i class="fas fa-info-circle"></i> 
                                <strong>Created from Application:</strong><br />
                                Application ID: @_applicationId
                            </div>
                        }
                    </div>
                </div>

                @if (PageState.Action == "Edit")
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h6>Quick Actions</h6>
                        </div>
                        <div class="card-body">
                            <div class="d-grid gap-2">
                                <ActionLink Action="Monitor" Parameters="@($"gardenId={_gardenId}")" 
                                           Text="Add Monitoring Session" ResourceKey="Monitor" Class="btn btn-success btn-sm" />
                                <ActionLink Action="Photos" Parameters="@($"gardenId={_gardenId}")" 
                                           Text="Manage Photos" ResourceKey="Photos" Class="btn btn-info btn-sm" />
                                <ActionLink Action="Plantings" Parameters="@($"gardenId={_gardenId}")" 
                                           Text="Manage Tree Plantings" ResourceKey="Plantings" Class="btn btn-secondary btn-sm" />
                            </div>
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header">
                            <h6>Audit Information</h6>
                        </div>
                        <div class="card-body">
                            <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="d-flex gap-2 justify-content-center">
                    <button type="button" class="btn btn-primary" @onclick="SaveGarden">
                        <i class="fas fa-save"></i> @Localizer["Save"]
                    </button>
                    
                    <NavLink class="btn btn-secondary" href="@NavigateUrl()">
                        <i class="fas fa-arrow-left"></i> @Localizer["Cancel"]
                    </NavLink>
                </div>
            </div>
        </div>
    </div>
</form>

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;
    public override string Actions => "Add,Edit,Create";
    public override string Title => "Garden Site Assessment";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Stylesheet(ModulePath() + "Module.css")
    };

    private ElementReference form;
    private bool validated = false;

    // Form fields
    private int _gardenId;
    private int? _applicationId;
    private string _evaluatorName = "";
    private string _beneficiaryName = "";
    private string _houseNumber = "";
    private string _idOrBirthdate = "";
    private string _village = "";
    private string _address = "";
    private decimal? _latitude;
    private decimal? _longitude;
    private string _notes = "";

    // Assessment fields
    private bool? _hasWaterInPlot;
    private bool? _hasWaterCatchmentSystem;
    private int? _numberOfExistingTrees;
    private int? _numberOfIndigenousTrees;
    private int? _numberOfFruitNutTrees;
    private bool? _hasSpaceForMoreTrees;
    private bool? _isPropertyFenced;
    private bool? _hasCompostOrMulchResources;

    // Status and audit
    private GardenStatus _status = GardenStatus.Active;
    private DateTime? _plantingDate;
    private string _createdby = "";
    private DateTime _createdon;
    private string _modifiedby = "";
    private DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _gardenId = Int32.Parse(PageState.QueryString["id"]);
                var garden = await GardenService.GetGardenAsync(_gardenId);
                if (garden != null)
                {
                    LoadGardenData(garden);
                }
            }
            else if (PageState.Action == "Create" && PageState.QueryString.ContainsKey("applicationId"))
            {
                _applicationId = Int32.Parse(PageState.QueryString["applicationId"]);
                await LoadApplicationData();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Garden {GardenId} {Error}", _gardenId, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task LoadApplicationData()
    {
        if (_applicationId.HasValue)
        {
            var application = await ApplicationService.GetApplicationAsync(_applicationId.Value);
            if (application != null)
            {
                _evaluatorName = application.EvaluatorName ?? "";
                _beneficiaryName = application.BeneficiaryName ?? "";
                _village = application.Village ?? "";
                _address = application.Address ?? "";
            }
        }
    }

    private void LoadGardenData(GardenSite garden)
    {
        _gardenId = garden.GardenSiteId;
        _applicationId = garden.ApplicationId;
        _evaluatorName = garden.EvaluatorName ?? "";
        _beneficiaryName = garden.BeneficiaryName ?? "";
        _houseNumber = garden.HouseNumber ?? "";
        _idOrBirthdate = garden.IdOrBirthdate ?? "";
        _village = garden.Village ?? "";
        _address = garden.Address ?? "";
        _latitude = garden.Latitude;
        _longitude = garden.Longitude;
        _notes = garden.Notes ?? "";

        _hasWaterInPlot = garden.HasWaterInPlot;
        _hasWaterCatchmentSystem = garden.HasWaterCatchmentSystem;
        _numberOfExistingTrees = garden.NumberOfExistingTrees;
        _numberOfIndigenousTrees = garden.NumberOfIndigenousTrees;
        _numberOfFruitNutTrees = garden.NumberOfFruitNutTrees;
        _hasSpaceForMoreTrees = garden.HasSpaceForMoreTrees;
        _isPropertyFenced = garden.IsPropertyFenced;
        _hasCompostOrMulchResources = garden.HasCompostOrMulchResources;

        _status = garden.Status;
        _plantingDate = garden.PlantingDate;
        _createdby = garden.CreatedBy ?? "";
        _createdon = garden.CreatedOn;
        _modifiedby = garden.ModifiedBy ?? "";
        _modifiedon = garden.ModifiedOn;
    }

    private async Task SaveGarden()
    {
        try
        {
            validated = true;

            // Basic validation for required fields
            if (string.IsNullOrWhiteSpace(_beneficiaryName))
            {
                AddModuleMessage("Beneficiary name is required", MessageType.Warning);
                return;
            }

            if (PageState.Action == "Add")
            {
                var garden = new GardenSite
                {
                    ModuleId = ModuleState.ModuleId,
                    EvaluatorName = _evaluatorName,
                    BeneficiaryName = _beneficiaryName,
                    HouseNumber = _houseNumber,
                    IdOrBirthdate = _idOrBirthdate,
                    Village = _village,
                    Address = _address,
                    Latitude = _latitude,
                    Longitude = _longitude,
                    Notes = _notes,
                    HasWaterInPlot = _hasWaterInPlot,
                    HasWaterCatchmentSystem = _hasWaterCatchmentSystem,
                    NumberOfExistingTrees = _numberOfExistingTrees,
                    NumberOfIndigenousTrees = _numberOfIndigenousTrees,
                    NumberOfFruitNutTrees = _numberOfFruitNutTrees,
                    HasSpaceForMoreTrees = _hasSpaceForMoreTrees,
                    IsPropertyFenced = _isPropertyFenced,
                    HasCompostOrMulchResources = _hasCompostOrMulchResources,
                    Status = _status,
                    PlantingDate = _plantingDate
                };

                garden = await GardenService.AddGardenAsync(garden);
                await logger.LogInformation("Garden Added {Garden}", garden);
                AddModuleMessage("Garden created successfully", MessageType.Success);
            }
            else if (PageState.Action == "Create" && _applicationId.HasValue)
            {
                var request = new CreateGardenFromApplicationRequest
                {
                    ApplicationId = _applicationId.Value,
                    EvaluatorName = _evaluatorName,
                    HouseNumber = _houseNumber,
                    IdOrBirthdate = _idOrBirthdate,
                    HasWaterInPlot = _hasWaterInPlot,
                    HasWaterCatchmentSystem = _hasWaterCatchmentSystem,
                    NumberOfExistingTrees = _numberOfExistingTrees,
                    NumberOfIndigenousTrees = _numberOfIndigenousTrees,
                    NumberOfFruitNutTrees = _numberOfFruitNutTrees,
                    HasSpaceForMoreTrees = _hasSpaceForMoreTrees,
                    IsPropertyFenced = _isPropertyFenced,
                    HasCompostOrMulchResources = _hasCompostOrMulchResources,
                    Notes = _notes,
                    Latitude = _latitude,
                    Longitude = _longitude
                };

                var garden = await GardenService.CreateGardenFromApplicationAsync(request);
                await logger.LogInformation("Garden Created from Application {ApplicationId}", _applicationId);
                AddModuleMessage("Garden created from application successfully", MessageType.Success);
            }
            else
            {
                var garden = new GardenSite
                {
                    GardenSiteId = _gardenId,
                    ApplicationId = _applicationId.Value,
                    ModuleId = ModuleState.ModuleId,
                    EvaluatorName = _evaluatorName,
                    BeneficiaryName = _beneficiaryName,
                    HouseNumber = _houseNumber,
                    IdOrBirthdate = _idOrBirthdate,
                    Village = _village,
                    Address = _address,
                    Latitude = _latitude,
                    Longitude = _longitude,
                    Notes = _notes,
                    HasWaterInPlot = _hasWaterInPlot,
                    HasWaterCatchmentSystem = _hasWaterCatchmentSystem,
                    NumberOfExistingTrees = _numberOfExistingTrees,
                    NumberOfIndigenousTrees = _numberOfIndigenousTrees,
                    NumberOfFruitNutTrees = _numberOfFruitNutTrees,
                    HasSpaceForMoreTrees = _hasSpaceForMoreTrees,
                    IsPropertyFenced = _isPropertyFenced,
                    HasCompostOrMulchResources = _hasCompostOrMulchResources,
                    Status = _status,
                    PlantingDate = _plantingDate
                };

                garden = await GardenService.UpdateGardenAsync(garden);
                await logger.LogInformation("Garden Updated {Garden}", garden);
                AddModuleMessage("Garden updated successfully", MessageType.Success);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Garden {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.SaveError"], MessageType.Error);
        }
    }
}