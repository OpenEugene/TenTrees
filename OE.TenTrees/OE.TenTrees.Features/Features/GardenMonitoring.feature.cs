// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OE.TenTrees.Features.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GardenMonitoringFeature : object, Xunit.IClassFixture<GardenMonitoringFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Garden Monitoring", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GardenMonitoring.feature"
#line hidden
        
        public GardenMonitoringFeature(GardenMonitoringFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record successful monitoring visit")]
        [Xunit.TraitAttribute("FeatureTitle", "Garden Monitoring")]
        [Xunit.TraitAttribute("Description", "Record successful monitoring visit")]
        public async System.Threading.Tasks.Task RecordSuccessfulMonitoringVisit()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Record successful monitoring visit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
  await testRunner.GivenAsync("I am assigned to monitor \"Peter\'s Garden\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
  await testRunner.WhenAsync("I visit the garden and access the monitoring form", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
  await testRunner.AndAsync("I enter visit date as today\'s date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
  await testRunner.AndAsync("I enter \"10\" trees planted", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
  await testRunner.AndAsync("I enter \"9\" trees still alive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
  await testRunner.AndAsync("I select \"Yes\" for trees looking healthy", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
  await testRunner.AndAsync("I select \"No\" for chemical fertilizers usage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
  await testRunner.AndAsync("I select \"No\" for pesticides usage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
  await testRunner.AndAsync("I select \"Yes\" for trees being mulched", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.AndAsync("I select \"Yes\" for compost making", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("I select \"Yes\" for water collection", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.AndAsync("I add a photo of the garden", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
  await testRunner.AndAsync("I submit the monitoring report", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
  await testRunner.ThenAsync("the monitoring record should be saved", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 18
  await testRunner.AndAsync("the garden\'s progress should be updated", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
  await testRunner.AndAsync("alerts should be generated if intervention is needed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Report garden problems")]
        [Xunit.TraitAttribute("FeatureTitle", "Garden Monitoring")]
        [Xunit.TraitAttribute("Description", "Report garden problems")]
        public async System.Threading.Tasks.Task ReportGardenProblems()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Report garden problems", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
  await testRunner.GivenAsync("I am conducting a monitoring visit", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
  await testRunner.WhenAsync("I notice trees have broken branches", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
  await testRunner.AndAsync("I select \"The trees have broken branches\" from the problems list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("I add notes \"Several branches broken by wind, need pruning support\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
  await testRunner.AndAsync("I submit the report", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
  await testRunner.ThenAsync("a problem ticket should be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
  await testRunner.AndAsync("the garden should be flagged for follow-up", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
  await testRunner.AndAsync("appropriate staff should be notified", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track tree mortality")]
        [Xunit.TraitAttribute("FeatureTitle", "Garden Monitoring")]
        [Xunit.TraitAttribute("Description", "Track tree mortality")]
        public async System.Threading.Tasks.Task TrackTreeMortality()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Track tree mortality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 32
  await testRunner.GivenAsync("there are 10 trees planted in the garden", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 33
  await testRunner.WhenAsync("I visit and find only 7 trees alive", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
  await testRunner.AndAsync("I enter \"7\" for trees still alive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("I enter \"Wind damage\" as the reason for dead trees", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.ThenAsync("the system should calculate 30% mortality rate", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
  await testRunner.AndAsync("if mortality exceeds threshold, an alert should be generated", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
  await testRunner.AndAsync("replacement tree recommendations should be suggested", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await GardenMonitoringFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await GardenMonitoringFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
